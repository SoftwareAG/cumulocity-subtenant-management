name: Main CI

on:
  push:
    branches: [main]
    tags:
    - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10
  pull_request:
    branches: [main]

env:
  NODE_VERSION: '12'

# concurrency: 
#   group: ${{ github.ref }}
#   cancel-in-progress: true

jobs:
  build:
    name: 🚧 Lint, Test, Build & (optionally) Release
    runs-on: ubuntu-latest
    steps:
      - name: Set RELEASE_VERSION env variable
        run: echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV

      - name: Check out Git repository
        uses: actions/checkout@v2

      - name: Set up Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Set C8Y_VERSION env variable
        run: echo "C8Y_VERSION=$(node -p -e "require('./package.json').dependencies['@c8y/ngx-components']")" >> $GITHUB_ENV

      - name: Cache node modules
        uses: actions/cache@v2
        env:
          cache-name: cache-node-modules
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - name: Install Node.js dependencies
        run: npm install

      - name: 🕵️‍♂️  Lint
        run: npm run lint --if-present

      - name: 🧪  Test
        run: npm test --if-present

      - name: 🚧  Build
        run: npm run build --if-present

      - name: Upload Subtenant Artifact
        uses: actions/upload-artifact@v2
        with:
          name: subtenant-management-${{ github.run_id }}
          path: dist/apps/subtenant-management/

      - name: Upload Administration Artifact
        uses: actions/upload-artifact@v2
        with:
          name: administration-${{ github.run_id }}
          path: dist/apps/administration/

      - name: 🎁 Zip Subtenant Management
        if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
        run: |
          cd dist/apps/subtenant-management
          zip -r -q ../../../subtenant-management.zip *
          cd ../../..

      - name: 🎁 Zip Administration
        if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
        run: |
          cd dist/apps/administration
          zip -r -q ../../../administration.zip *
          cd ../../..

      - name: Create Release
        if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ env.RELEASE_VERSION }} based on ${{ env.C8Y_VERSION }}
          draft: false
          prerelease: true

      - name: Upload Release Asset Subtenant Management
        if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
        id: upload-release-asset-subtenant 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./subtenant-management.zip
          asset_name: subtenant-management-${{ env.C8Y_VERSION }}-${{ env.RELEASE_VERSION }}.zip
          asset_content_type: application/zip

      - name: Upload Release Asset Administration
        if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
        id: upload-release-asset-admin 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./administration.zip
          asset_name: administration-${{ env.C8Y_VERSION }}-${{ env.RELEASE_VERSION }}.zip
          asset_content_type: application/zip
